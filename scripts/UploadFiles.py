#!/usr/bin/env python
"""
Copyright 2019 David Wong

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import base64
import requests
from urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

session = requests.Session()
session.verify = False

WIKI_URI = "https://192.168.56.56/demo"
API_ENDPOINT = WIKI_URI + "/api.php"

USERNAME = "Admin"
PASSWORD = "adminpass"


def fetch_tokens(type):
    body = {
        "action": "query",
        "meta": "tokens",
        "type": type,
        "format": "json"
    }

    response = session.get(url=API_ENDPOINT, params=body)
    data = response.json()

    tokens = data["query"]["tokens"]

    return tokens


def fetch_login_token():
    return fetch_tokens("login")["logintoken"]


def fetch_csrf_token():
    return fetch_tokens("csrf")["csrftoken"]


def login(option):
    username = option["username"]
    password = option["password"]

    token = option["token"]
    return_uri = option["return_uri"]

    body = {
        "action": "clientlogin",
        "username": username,
        "password": password,
        "loginreturnurl": return_uri,
        "logintoken": token,
        "format": "json"
    }

    response = session.post(url=API_ENDPOINT, data=body)

    data = response.json()

    print(data)


def upload_file(option):
    file_name = option["name"]
    file_data = option["data"]

    token = option["token"]

    body = {
        "action": "upload",
        "filename": file_name,
        "token": token,
        "format": "json",
        "ignorewarnings": 1
    }

    files = {
        "file": (file_name, file_data, "multipart/form-data")
    }

    response = session.post(API_ENDPOINT, files=files, data=body)

    try:
        data = response.json()

        print(data)
    except ValueError:
        print(response)
        print(response.content)


def upload_files(option):
    files = option["files"]

    token = option["token"]

    for file in files:
        name = file["name"]
        data = file["data"]

        upload_file({
            "name": name,
            "data": data,
            "token": token
        })


def main(*args):
    minimal_pdf = """%PDF-1.0
1 0 obj<</Pages 2 0 R>>endobj 2 0 obj<</Kids[3 0 R]/Count 1>>endobj 3 0 obj<</MediaBox[0 0 3 3]>>endobj
trailer<</Root 1 0 R>>"""
    minimal_gif = base64.b64decode("R0lGODlhAQABAIABAP///wAAACwAAAAAAQABAAACAkQBADs=")
    minimal_docx = base64.b64decode("")

    files = [
        {"name": "Minimal PDF.pdf", "data": minimal_pdf},
        {"name": "Minimal PDF 1.pdf", "data": minimal_pdf},
        {"name": "Minimal GIF.gif", "data": minimal_gif},
        {"name": "Minimal DOCX.docx", "data": minimal_docx}
    ]

    print("Fetching login token...")
    login_token = fetch_login_token()
    print()

    print("Logging in...")
    login({"username": USERNAME, "password": PASSWORD, "token": login_token, "return_uri": WIKI_URI})
    print()

    print("Fetching CSRF token...")
    csrf_token = fetch_csrf_token()
    print()

    print("Uploading files...")
    upload_files({"files": files, "token": csrf_token})


if __name__ == "__main__":
    main()